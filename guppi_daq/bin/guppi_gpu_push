#!/usr/bin/env python
# Pushes all DAQ params from beef to gpu nodes using guppi controller
import re, time, os, sys
import guppi_daq.guppi2_utils as guppi2
from guppi.client import Client

# print start message
print "guppi_gpu_push started at %s" % time.asctime()
sys.stdout.flush()

# Connection to local controller (on beef)
g = Client()

# Direct connections to gpu nodes daq servers
gpu_g = {}
for i in range(1,9): 
    node = 'gpu%d' % i
    gpu_g[node] = Client(host=node)

# Parameters we don't want to send
nosend = ['DAQPULSE', 'DAQSTATE', 'DISKSTAT', 'NETSTAT', 'FOLDSTAT',
        'CURBLOCK', 'CURFOLD', 'DROPTOT', 'DROPAVG', 'DROPBLK', 
        'PKTIDX', 'STT_IMJD', 'STT_SMJD', 'STT_OFFS', 'STTVALID', 'NULLSTAT']

# GPU setup params:
# BEE2 IP addrs for each node
datahost = {
        'gpu1': '192.168.3.20',
        'gpu2': '192.168.3.21',
        'gpu3': '192.168.3.22',
        'gpu4': '192.168.3.23',
        'gpu5': '192.168.3.20',
        'gpu6': '192.168.3.21',
        'gpu7': '192.168.3.22',
        'gpu8': '192.168.3.23'
        }
# dir for parfiles on cluster
pardir = "/home/gpu/tzpar"

# One-time grab of keylist
keys = g.get()
daqkeys = []
for k in keys:
    if not re.match("DAQ", k): continue
    send = True
    for nk in nosend:
        if re.search(nk, k): send = False
    if send: daqkeys += [k]

run = True
count = 0
t0 = time.time()
while run:
    try:
        # Get values from beef
        daqvals = g.get(daqkeys)
        daqparam = dict(zip(daqkeys, daqvals))

        # Compute some freq/bw stuff
        rf = float(daqparam['DAQ/OBSFREQ'])
        bw = float(daqparam['DAQ/OBSBW'])
        nchan = int(daqparam['DAQ/OBSNCHAN'])
        chan_bw = bw/nchan
        node_bw = bw / 8.0
        node_nchan = nchan/8

        # See if CHAN_DM has been set
        # TODO: Prefer either CHAN_DM or parfile DM depending on 
        #       what the observing mode is.
        try:
            dm = float(daqparam['DAQ/CHAN_DM'])
        except KeyError:
            dm = 0.0

        # Parfile-related parameters
        parfile_full = daqparam['DAQ/PARFILE']
        parfile = ''
        if parfile_full != None and parfile_full != '': 
            parfile = parfile_full.split('/')[-1]
            os.system("cp %s /export/%s/" % (parfile_full, pardir))
            try:
                dm = guppi2.dm_from_parfile(parfile_full)
            except:
                dm = 0.0

        # Set fft size params based on rf, dm, etc
        (fftlen, overlap, blocsize) = guppi2.fft_size_params(rf,bw,nchan,dm)

        # Send out params to gpu nodes
        gpuset = {}
        for i in range(1,9):

            node = "gpu%d" % i

            # For going through beef's controller:
            #gpukeys = ["%s/%s" % (node.upper(), k) for k in daqkeys]
            #pfx = "%s/DAQ/" % node.upper()

            # For using gpu controllers directly:
            gpukeys = [k.split('/')[-1] for k in daqkeys]
            pfx = ""
            gpuset = {}

            gpuset.update(dict(zip(gpukeys, daqvals)))

            # Some daq values need to be changed to node-specific ones
            gpuset[pfx+'DATAHOST'] = datahost[node]
            gpuset[pfx+'PKTFMT'] = '1SFA'
            gpuset[pfx+'ACC_LEN'] = '1'
            node_rf = rf - bw/2.0 - chan_bw/2.0 + (i-1.0+0.5)*node_bw 
            gpuset[pfx+'OBSFREQ'] = repr(node_rf)
            gpuset[pfx+'OBSBW'] = repr(node_bw)
            gpuset[pfx+'OBSNCHAN'] = repr(node_nchan)
            gpuset[pfx+'TBIN'] = repr(abs(1e-6*nchan/bw))
            gpuset[pfx+'DATADIR'] = '/data/gpu/partial/' + node
            gpuset[pfx+'SCALE0'] = '1.0'
            gpuset[pfx+'SCALE1'] = '1.0'
            gpuset[pfx+'SCALE2'] = '1.0'
            gpuset[pfx+'SCALE3'] = '1.0'
            gpuset[pfx+'OFFSET0'] = '0.0'
            gpuset[pfx+'OFFSET1'] = '0.0'
            gpuset[pfx+'OFFSET2'] = '0.0'
            gpuset[pfx+'OFFSET3'] = '0.0'
            if parfile=='':
                gpuset[pfx+'PARFILE'] = ''
            else:
                gpuset[pfx+'PARFILE'] = '%s/%s' % (pardir, parfile)
            gpuset[pfx+'CHAN_DM'] = repr(dm)
            gpuset[pfx+'FFTLEN'] = repr(fftlen)
            gpuset[pfx+'OVERLAP'] = repr(overlap)
            gpuset[pfx+'BLOCSIZE'] = repr(blocsize)

            # Set using a direct connection to each node's server:
            gpu_g[node].set(gpuset)

        # Set using a single call to beef's server (this is slower):
        #g.set(gpuset)
        count += 1
        time.sleep(0.5)
    except KeyboardInterrupt:
        run = False

# print msg on exit
t = time.time()
print "guppi_gpu_push exiting at %s" % time.asctime()
print "  avg time per iter = %.1f ms" % (1e3*(t-t0)/count)
sys.stdout.flush()
