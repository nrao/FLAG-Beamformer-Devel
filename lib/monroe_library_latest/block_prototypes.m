%%%%%%%%%%%%%%--XILINX GENERIC BLOCKS--%%%%%%%%%%%%%%%%%%

%constant (boolean)
bConstantBool = xBlock(struct('source', 'Constant', 'name', 'constant_bool'), ...
    struct('arith_type', 'Boolean', 'const', 0, 'explicit_period', 'on'), ...
    {}, {sOut});

bConstantUnsigned = xBlock(struct('source', 'Constant', 'name', 'constant_unsigned'), ...
    struct('const', 0, 'n_bits', bit_width, ...
    'bin_pt', bit_width-1, 'explicit_period', 'on'), ...
    {}, {sOut});

%Concat
bConcat = xBlock(struct('source', 'Concat', 'name', 'concat'), ...
    struct('num_inputs', numInputs), ...
    sInArr, {sConcatOut});

%Reinterpret
bReinterpret = xBlock(struct('source','Reinterpret', 'name', 'reinterpret'), ...
    struct('force_arith_type', 'on', 'arith_type', 'Unsigned', ...
    'force_bin_pt',     'on', 'bin_pt', 0), ...
    {sIn}, {sOut});
%Slice
bSlice = xBlock(struct('source', 'Slice', 'name', 'sliceUpper'), struct( ...
    'nbits', 1, 'boolean_output','off', 'mode', 'Upper Bit Location + Width', ...
    'base1', 'MSB of Input', 'base0', 'MSB of Input', 'bit1', 0), ...
    {sIn}, {sOut});

%Convert
bConvert = xBlock(struct('source', 'Convert', 'name', 'Convert'), ...
    struct('n_bits', nBits, 'bin_pt', nBits-1), ...
    {sIn}, {sOut});

%counter (up)
bCountUp = xBlock(struct('source','Counter', 'name', 'Counter_up'), ...
    struct('cnt_type', 'Free Running', 'operation', 'Up', 'start_count',...
    0, 'cnt_by_val', 1, 'arith_type', 'Unsigned', 'n_bits', FFTSize, 'bin_pt', 0, 'load_pin', 'off',...
    'rst', 'on', 'en', 'off', 'period', 1, 'explicit_period', 'on', 'implementation', 'Fabric'), ...
    {sReset}, {sCountOut});

%Multiplexer
bMux = xBlock(struct('source', 'Mux', 'name', 'Mux'), struct( ...
    'arith_type', 'Signed  (2''s comp)', 'n_bits', 8, 'bin_pt', 2), ...
    {sSel, sDin0, sDin1}, {sOut});

%scale
xlsub2_Scale = xBlock(struct('source', 'Scale', 'name', 'Scale'), ...
    struct('scale_factor', -1*shift), ...
    {sIn}, {sOut});



%%%%begin dual port RAM%%%%
xlsub2_Dual_Port_RAM4 = xBlock(struct('source', 'Dual Port RAM', 'name', 'Dual Port RAM4'), ...
    struct('depth', length(coeff), 'initVector', coeff, 'latency', 2, ...
    'distributed_mem', memory_type, 'write_mode_A', 'No Read On Write', ...
    'write_mode_B', 'No Read On Write'));
if(strcmp(memory_type,'Block RAM'))
    bDualPortRam.bindPort({sAddrA, sDinA, sWriteEnableA, sAddrB, sDinB, sWriteEnableB}, ...
        {sDoutA, sDoutB});
else
    bDualPortRam.bindPort({sAddrA, sDinA, sWriteEnableA, sAddrB}, ...
        {sDoutA, sDoutB});
end
%%%%end dual port ram%%%%




%%%%%%%%%%%%%%--Monroe_Library blocks--%%%%%%%%%

%sync_delay_fast
bSyncDelay = xBlock(struct('source', 'monroe_library/sync_delay_fast', 'name', 'sync_delay_fast'), ...
    struct('delay_len', delay_len), ...
    {sIn}, {sOut});

%coeff_gen_dual
bCoeffGenDual = xBlock(struct('source', str2func('coeff_gen_dual_draw'), ...
    'name',strcat('coeff_gen',num2str(stageNum))), ...
    {coeff, memory_type, bit_width, step_rate, register_coeffs}, ...
    {sSyncIn}, {sCoeffOut});


%cram
bCram = xBlock(struct('source', str2func('cram_draw'), 'name', 'cram'), ...
    {nInputs}, ...
    sInArr , {oCram});

bUnCram= xBlock(struct('source', str2func('uncram_draw'), 'name', 'uncram'), ...
    {numSignals, bitWidth, binPt, signalType},{sUncramIn},sOutputArr);

%%%%%%%%%%%%%%--BUTTERFLIES--%%%%%%%%%%%%%%%%%%

%Twiddle_stage1

bTwiddleStg1 = xBlock(struct('source', 'monroe_library/twiddle_stage1', ...
    'name', 'twiddle_stage1'), ...
    struct('input_bit_width',input_bit_width, ...
    'out_n_bits', output_bit_width, 'downshift_at_end', shift), ...
    {a_in, b_in, sync_in}, ...
    {apbw_out, ambw_out, sync_out});

%Twiddle_stage2

bTwiddleStg2 = xBlock(struct('source', 'monroe_library/twiddle_stage2', 'name', 'twiddle_stage2'), ...
    struct('FFTSize', FFTSize, 'input_bit_width',input_bit_width, 'out_n_bits', ...
    output_bit_width, 'downshift_at_end', shift), ...
    {a_in, b_in, sTwiddleSel, sync_in}, ...
    {apbw_out, ambw_out, sync_out});

%Twiddle_cheap
bTwiddleCheap = xBlock(struct('source', 'monroe_library/twiddle_cheap', 'name', 'twiddle_cheap'), ...
    struct('a_n_bits',input_bit_width, 'a_bin_pt', input_bit_width-1, ...
    'b_n_bits', input_bit_width, 'b_bin_pt', input_bit_width-1, ...
    'w_n_bits', coeff_bit_width, 'w_bin_pt', coeff_bit_width-1, 'a_delay', ...
    0, 'apbw_delay', 0, 'out_n_bits', output_bit_width, 'downshift_at_end', shift), ...
    {a_in, b_in, coeff_in, sync_in}, ...
    {apbw_out, ambw_out, sync_out});
%%%%%%%%%%%%%--DELAYS--%%%%%%%%%%%%%%%%

%single_delay_bram_fast
xlsub2_ddbf = xBlock(struct('source', 'monroe_library/delay_bram_fast', ...
    'name', 'delay_bram_fast'), ...
    struct('delay_len', delay_len, 'bram_latency', bram_latency), ...
    {sIn}, {sOut});

%double_delay_bram_fast
xlsub2_ddbf = xBlock(struct('source', 'monroe_library/double_delay_bram_fast', ...
    'name', 'double_delay_bram_fast'), ...
    struct('delay_len', long_delay_len, 'bram_latency', bram_latency), ...
    {sInA, sInB}, {sOutA, sOutB});


bBulkDelay = xBlock(struct('source',str2func('bulk_delay_draw'), ...
    'name', 'bulk_delay'), ...
    {numInputs,delayArr}, sInArr, sOutArr);