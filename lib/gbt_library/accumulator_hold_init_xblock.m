function accumulator_hold_init_xblock(blk, varargin)


defaults = {'add_latency', 1, 'hold_period', 1};


n_bits = get_var('n_bits', 'defaults', defaults, varargin{:});
hold_period = get_var('hold_period', 'defaults', defaults, varargin{:});


%% inports
xlsub1_data_in = xInport('data_in');
xlsub1_sync = xInport('sync');

%% outports
xlsub1_acc_out = xOutport('acc_out');
xlsub1_en = xOutport('en');

%% diagram

if hold_period == 1
    xlsub1_Accumulator = xBlock(struct('source', 'Accumulator', 'name', 'Accumulator'), ...
                            struct('rst', 'off', ...
                                   'en', 'on', ...
                                   'operation', 'Add', ...
                                   'n_bits',n_bits, ...
                                   'overflow', 'Wrap', ...
                                   'scale', 1, ...
                                   'use_behavioral_HDL', 'on', ...
                                   'implementation','DSP48'), ...
                            {xlsub1_data_in}, ...
                            {xlsub1_acc_out});
    xConnector(xlsub1_en,xlsub1_sync);
    return
end

% block: untitled/Accumulator
xlsub1_Relational_out1 = xSignal('xlsub1_Relational_out1');
xlsub1_Accumulator = xBlock(struct('source', 'Accumulator', 'name', 'Accumulator'), ...
                            struct('rst', 'off', ...
                                   'en', 'on', ...
                                   'operation', 'Add', ...
                                   'n_bits',n_bits, ...
                                   'overflow', 'Wrap', ...
                                   'scale', 1, ...
                                   'use_behavioral_HDL', 'on', ...
                                   'implementation','DSP48'), ...
                            {xlsub1_data_in, xlsub1_Relational_out1}, ...
                            {xlsub1_acc_out});

% block: untitled/Constant
xlsub1_Constant_out1 = xSignal('xlsub1_Constant_out1');
xlsub1_Constant = xBlock(struct('source', 'Constant', 'name', 'Constant'), ...
                         struct('const', 0), ...
                         {}, ...
                         {xlsub1_Constant_out1});

% block: untitled/Counter1
xlsub1_Counter1_out1 = xSignal('xlsub1_Counter1_out1');
xlsub1_Counter1 = xBlock(struct('source', 'Counter', 'name', 'Counter1'), ...
                         struct('cnt_type', 'Count Limited', ...
                                'cnt_to', 0, ...
                                'operation', 'Down', ...
                                'start_count', hold_period - 1, ...
                                'n_bits', nextpow2(hold_period), ...
                                'rst', 'on'), ...
                         {xlsub1_sync}, ...
                         {xlsub1_Counter1_out1});

% block: untitled/Relational
xlsub1_Relational = xBlock(struct('source', 'Relational', 'name', 'Relational'), ...
                           [], ...
                           {xlsub1_Counter1_out1, xlsub1_Constant_out1}, ...
                           {xlsub1_Relational_out1});

% extra outport assignment
xConnector(xlsub1_en,xlsub1_Relational_out1);

if ~isempty(blk) && ~strcmp(blk(1),'/')
    clean_blocks(blk);
    fmtstr=sprintf('hold period: %d\n bit width: %d',hold_period, n_bits);
    set_param(blk,'AttributesFormatString',fmtstr);
end
end

