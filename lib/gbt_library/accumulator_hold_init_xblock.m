function accumulator_hold_init_xblock(blk, varargin)


defaults = {'add_latency', 1, 'hold_period', 1, 'ext_en', 'on'};


n_bits = get_var('n_bits', 'defaults', defaults, varargin{:});
hold_period = get_var('hold_period', 'defaults', defaults, varargin{:});
ext_en = get_var('ext_en', 'defaults', defaults, varargin{:});

%% inports
xlsub1_data_in = xInport('data_in');


%% outports
xlsub1_acc_out = xOutport('acc_out');
xlsub1_en_out = xOutport('en_out');

if strcmp(ext_en, 'off')
    
    xlsub1_sync = xInport('sync');
    
    if hold_period == 1
        accumulator_hold_period_one_init_xblock(blk, xlsub1_data_in, xlsub1_sync, xlsub1_acc_out,xlsub1_en_out, hold_period, n_bits);
        return;
    end
    
    en = xSignal('en');
    hold_en = xBlock(struct('source', str2func('hold_en_init_xblock'), 'name', 'en_gen'), ...
             {[blk, '/en_gen'], ...
              'hold_period', hold_period}, ...
             {xlsub1_sync}, ...
             {en});
         
    xlsub1_Accumulator = xBlock(struct('source', 'Accumulator', 'name', 'Accumulator'), ...
                            struct('rst', 'off', ...
                                   'en', 'on', ...
                                   'operation', 'Add', ...
                                   'n_bits',n_bits, ...
                                   'overflow', 'Wrap', ...
                                   'scale', 1, ...
                                   'use_behavioral_HDL', 'on', ...
                                   'implementation','DSP48'), ...
                            {xlsub1_data_in, en}, ...
                            {xlsub1_acc_out});
    
    
    % extra outport assignment
    xConnector(xlsub1_en_out, en);
    
else
    xlsub1_en_in = xInport('en_in');

    if hold_period == 1
        accumulator_hold_period_one_init_xblock(blk, xlsub1_data_in,xlsub1_en_in, xlsub1_acc_out,xlsub1_en_out, hold_period, n_bits);
        return;
    end


    xlsub1_Accumulator = xBlock(struct('source', 'Accumulator', 'name', 'Accumulator'), ...
                                struct('rst', 'off', ...
                                       'en', 'on', ...
                                       'operation', 'Add', ...
                                       'n_bits',n_bits, ...
                                       'overflow', 'Wrap', ...
                                       'scale', 1, ...
                                       'use_behavioral_HDL', 'on', ...
                                       'implementation','DSP48'), ...
                                {xlsub1_data_in, xlsub1_en_in}, ...
                                {xlsub1_acc_out});

    xConnector(xlsub1_en_out,xlsub1_en_in);                        
end


if ~isempty(blk) && ~strcmp(blk(1),'/')
        clean_blocks(blk);
        fmtstr=sprintf('hold period: %d\n bit width: %d',hold_period, n_bits);
        set_param(blk,'AttributesFormatString',fmtstr);
end
end

function accumulator_hold_period_one_init_xblock(blk, data_inport, sync_or_en_inport, acc_outport, en_outport, hold_period, n_bits)

    xlsub1_Accumulator = xBlock(struct('source', 'Accumulator', 'name', 'Accumulator'), ...
                            struct('rst', 'off', ...
                                   'operation', 'Add', ...
                                   'n_bits',n_bits, ...
                                   'overflow', 'Wrap', ...
                                   'scale', 1, ...
                                   'use_behavioral_HDL', 'on', ...
                                   'implementation','DSP48'), ...
                            {data_inport}, ...
                            {acc_outport});
    xConnector(en_outport,sync_or_en_inport);
    
    if ~isempty(blk) && ~strcmp(blk(1),'/')
        clean_blocks(blk);
        fmtstr=sprintf('hold period: %d\n bit width: %d',hold_period, n_bits);
        set_param(blk,'AttributesFormatString',fmtstr);
    end

end

