function fft_direct_stage_draw(FFTSize, FFTStage, input_bit_width, coeff_bit_width, output_bit_width, shift, pathToBlock)


% xBlock;
% 
% FFTSize = 3;
% FFTStage = 1;
% input_bit_width = 18;
% coeff_bit_width = 18;
% output_bit_width =  18;
% shift = 1;

% iSync = xInport('sync_arr');
% oSync = xOutport('sync_out_arr');






if(~isInt([FFTSize, FFTStage, input_bit_width, ]))
    strError = strcat('The number of signals, bit width and binal point must all be integers; numSignals = ', num2str(numSignals), '; bitWidth = ', num2str(bitWidth), '; binPt = ', num2str(binPt)); 
   throwError(strError, pathToBlock); 
elseif(binPt <0)
   throwError('The Binal Point must be non-negative', pathToBlock); 
elseif(binPt <0)
    strError = strcat('The Binal Point must be non-negative; binPt = ', num2str(binPt)); 
   throwError(strError, pathToBlock); 
elseif(binPt > bitWidth)
    strError = strcat('The Binal Point must be less than the bit width; binPt = ', num2str(binPt), '; bitWidth = ', num2str(bitWidth)); 
   throwError(strError, pathToBlock); 
elseif(bitWidth < 1)
    strError = strcat('The bit width must be an integer greater than 0; bitWidth = ', num2str(bitWidth)); 
   throwError(strError, pathToBlock); 
elseif(binPt == bitWidth)
    strError = strcat('The binal point equals the bit width, this block may not function as intended; binPt = ', num2str(binPt), '; bitWidth = ', num2str(bitWidth)); 
   throwWarning(strError, pathToBlock);  
end




for(i = 1:(2^(FFTSize-1)))
   a_in{i} = xInport(strcat('in', num2str(i-1), '_A'));
   b_in{i} = xInport(strcat('in', num2str(i-1), '_B'));
   
   sCoeff{i} = xSignal;
%    sSync{i} = xSignal;
   
   oApBW{i} = xOutport(strcat('ApBW_', num2str(i-1)));
   oAmBW{i} = xOutport(strcat('AmBW_', num2str(i-1)));
   
end
iCoeff = xInport('coeff_arr');


bUnCramCoeff= xBlock(struct('source', str2func('uncram_draw'), 'name', 'uncram_coeff'), ...
    {2^(FFTSize-1), coeff_bit_width*2, 0, 'Unsigned'}, ...
    {iCoeff},sCoeff);

% bUnCramSync= xBlock(struct('source', str2func('uncram_draw'), 'name', 'uncram_sync'), ...
%     {2^(FFTSize-1), 1, 0, 'Unsigned'}, ...
%     {iSync},sSync);
sSync = xConstBool('const_sync', 0);

for(i = 1:(2^(FFTSize-1)))
    
    sSyncOut{i} = xSignal;
    bTwiddleCheap = xBlock(struct('source', 'monroe_library/twiddle_cheap', 'name', strcat('twiddle_', num2str(FFTStage), 'x', num2str(i-1))), ...
        struct('a_n_bits',input_bit_width, 'a_bin_pt', input_bit_width-1, ...
        'b_n_bits', input_bit_width, 'b_bin_pt', input_bit_width-1, ...
        'w_n_bits', coeff_bit_width, 'w_bin_pt', coeff_bit_width-1, 'a_delay', ...
        0, 'apbw_delay', 0, 'out_n_bits', output_bit_width, 'downshift_at_end', shift), ...
        {a_in{i}, b_in{i},  sCoeff{i}, sSync}, ...
        {oApBW{i}, oAmBW{i}});
end

% sConcatOut = xConcat(sSyncOut);
% oSync.bind(sConcatOut);
