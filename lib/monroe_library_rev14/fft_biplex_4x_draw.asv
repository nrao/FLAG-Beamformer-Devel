function fft_biplex_4x_draw(FFTSize,coeff_bit_width,input_bit_width,inter_stage_bit_width,shift_arr,max_distro_size_coeff,max_distro_size_delay,register_coeffs,stage_pre_delay,stage_mid_delay,stage_post_delay,bram_latency_fft,bram_latency_unscr,unscr_din_latency,path_to_block)
%
% % %
xBlock;

FFTSize = 5;
coeff_bit_width=  18*ones(1,FFTSize-2);
input_bit_width = 18;
inter_stage_bit_width = 18*ones(FFTSize); %up to 24
shift_arr = ones(FFTSize);
max_distro_size_coeff = 3;
max_distro_size_delay = 3;
register_coeffs = 0;

stage_pre_delay = 0;
stage_mid_delay = 0;
stage_post_delay = 0;



bram_latency_fft = 2;
bram_latency_unscr = 2;
unscr_din_latency = 0;
pathToBlock = 'path:biplex';



%%%%%%%%%%%%%%%%%%%%5

stage_delay_arr = [2 5 (6*ones(1,FFTSize-2))];
for(i = 1:FFTSize)
    optional_delay_arr(i,:) = [stage_pre_delay, stage_mid_delay, stage_post_delay];
end


if(length(coeff_bit_width) == 1)
    coeff_bit_width = coeff_bit_width * ones(1,FFTSize-2);
end


%I/O
iDataIn = {xInport('in0'),xInport('in1'),xInport('in2'),xInport('in3')};
iSync = xInport('sync');

oDataOut = {xOutport('out0'), xOutport('out1'), xOutport('out2'), xOutport('out3')};
oSync = xOutport('sync_out');


sInA = xCram({iDataIn{1}, iDataIn{2}}, 'cram0', extendPath(pathToBlock, 'cram0'));
sInB = xCram({iDataIn{3}, iDataIn{4}}, 'cram1', extendPath(pathToBlock, 'cram1'));

%add a muxsel/coeff generator, which will create all of our coefficients
%as well as generate our mux selects for use throughout the biplex stages.
%this block is extremely cheap compared with the standard formulation, at
%the cost of (of course) complexity.

sCoeffAll = xSignal;
sSelAll = xSignal;
sSyncCoreOut = xSignal;
blockTemp = xBlock(struct('source', str2func('biplex_coeff_muxsel_gen_draw'), 'name','biplex_muxsel_gen'), {FFTSize, coeff_bit_width, register_coeffs, max_distro_size_coeff, optional_delay_arr, stage_delay_arr, extendPath(pathToBlock, 'biplex_muxsel_gen')}, {iSync}, {sCoeffAll,sSelAll,sSyncCoreOut});

for(i=1:FFTSize)
    sCoeffStage{i} = xSignal;
    
    
    sSyncOutStage{i} = xSignal;
    sApbwOutStage{i} = xSignal;
    sAmbwOutStage{i} = xSignal;
    
    blockName =  strcat('sel_slice',num2str(i));
    sSelStage{i} = xSliceBool(sSelAll, 'upper', -1*(i-1), blockName,  extendPath(pathToBlock, blockName))
    
    if(i>max_distro_size_delay)
        delays_bram = 1;
    else
        delays_bram = 0;
    end
    
    
    if(i==1)
        blockName = strcat('stage_',num2str(i));
        blockTemp = xBlock(struct('source', str2func('biplex_stage_n_draw'), 'name',blockName), {FFTSize, i, input_bit_width, coeff_bit_width, inter_stage_bit_width(i), delays_bram, bram_latency_fft, shift_arr(i), optional_delay_arr(i,:),extendPath(pathToBlock, blockName)});
        blockTemp.bindPort({sInA, sInB, iSync, sSelStage{i}}, {sApbwOutStage{i},sAmbwOutStage{i},sSyncOutStage{i}});
        %blockTemp.bindPort({sInA, sInB, iSync, sSelStage{i}}, {sApbwOutStage{i}})
        
    elseif (i==2)
        
        blockName = strcat('stage_',num2str(i));
        blockTemp = xBlock(struct('source', str2func('biplex_stage_n_draw'), 'name',blockName), {FFTSize, i, inter_stage_bit_width(i-1), coeff_bit_width, inter_stage_bit_width(i), delays_bram, bram_latency_fft, shift_arr(i), optional_delay_arr(i,:),extendPath(pathToBlock, blockName)}, {sApbwOutStage{i-1},sAmbwOutStage{i-1}, sSyncOutStage{i-1}, sSelStage{i}}, {sApbwOutStage{i},sAmbwOutStage{i},sSyncOutStage{i}});
    else
        coeffOffset = -2 * coeff_bit_width(i-2) * (i-3);
        
        blockName = strcat('coeff_slice',num2str(i));
        sCoeffStage{i} = xSlice(sCoeffAll,  coeff_bit_width(i-2)*2 , 'upper', coeffOffset, ...
            blockName, extendPath(pathToBlock, blockName));
        
        
        blockName = strcat('stage_',num2str(i));
        blockTemp = xBlock(struct('source', str2func('biplex_stage_n_draw'), 'name',strcat('stage_',num2str(i))), {FFTSize, i, inter_stage_bit_width(i-1), coeff_bit_width(i-2), inter_stage_bit_width(i), delays_bram, bram_latency_fft, shift_arr(i), optional_delay_arr(i,:),extendPath(pathToBlock, blockName)}, {sApbwOutStage{i-1},sAmbwOutStage{i-1}, sSyncOutStage{i-1}, sCoeffStage{i}, sSelStage{i}}, {sApbwOutStage{i},sAmbwOutStage{i},sSyncOutStage{i}});
    end
    
    
end

blockTemp = xBlock(struct('source', str2func('biplex_4x_unscr_draw'), 'name','biplex_4x_unscr'), {FFTSize, bram_latency_unscr, inter_stage_bit_width(FFTSize), unscr_din_latency}, {sApbwOutStage{FFTSize},sAmbwOutStage{FFTSize}, sSyncCoreOut}, {oDataOut{1:4}, oSync});
