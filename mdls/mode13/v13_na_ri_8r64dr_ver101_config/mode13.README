Mode 13 README
--------------
Jayanth Chennamangalam


The following are instructions to run mode 13 (v13_na_ri_8r64dr_ver101.mdl) on
the BWRC ROACH I test setup.

1. Run mode13_conf.py. This will program the ROACH I with the file
   v13_na_ri_8r64dr_ver101_2012_Aug_06_1424.bof, configure IP address,
   port, etc.
2. tgtap could not be run programmatically on the ROACH I at BWRC, so we
   run it manually after logging into the ROACH:

   tgtap -a 10.0.1.10 -m 00:01:02:03:04:05 -p 60000 -t tap0 -b /proc/<PID>/hw/ioreg/gbe0

   Here, <PID> is the PID of the bof process.
3. Configure the mixers and CIC filters by running mode13_conf_mixercic.py.
4. Run vegas_hpc_lbw on the data acquisition machine. Make sure the
   configuration is proper.
5. Arm the system and spoof a PPS pulse to begin valid data transmission. On
   ipython, run the following:

   import corr
   fpga = corr.katcp_wrapper.FpgaClient('192.168.40.70')
   fpga.write_int('sg_sync', 0b10100)
   fpga.write_int('arm', 0)
   fpga.write_int('arm', 1)             # arm signal
   fpga.write_int('arm', 0)
   fpga.write_int('sg_sync', 0b10101)   # spoofed PPS
   fpga.write_int('sg_sync', 0b10100)

   If the board does not transmit valid data, check if there was overflow:

   fpga.read_uint('gbe0_overflow')

   If yes, send arm+PPS again.
   
   If tap_start() works, all of this can, of course, be done programmatically.
6. Use plot_vfits.py to plot the data.

Testing config (for reference):
ADC clock frequency: 400 MHz
Gain of mixer+CIC block: Unity (0x00, 0x01, 0x00, 0x00)
LO frequency: 100.78125 MHz
Input signal: -15 dBm, between 94.53125 MHz and 107.03125 MHz

For debugging, there are a few snap blocks in the design, some of which can be
accessed using the following scripts, the names of which are self-explanatory:
read_snap_adcout.py
read_snap_mixerout.py
read_snap_cicout.py
read_snap_quantreout.py (Also plots FFT of data)
read_snap_reshaperout.py 

It is possible to check if valid data is coming over the network without any
data acquisition by using the script vegas_plot_raw.py, which plots the raw
signals contained in a single UDP packet along with XX*, YY*, Re(XY*) and
Im(XY*) where X and Y are Fourier transforms of the input signals.

Known bugs:
1. Status bits in the time heap data structure are not filled (so blanking will
   not work)
2. Packet number seems to be treated as a signed number, leading to acquisition
   starting when packet number is large.

----

